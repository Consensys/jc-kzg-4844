---
version: 2.1

orbs:
  win: circleci/windows@5.0.0

executors:
  linux_executor:
    docker:
      - image: cimg/openjdk:17.0.11
    resource_class: medium
    working_directory: ~/jc-kzg-4844

  linux_executor_arm64:
    machine:
      image: ubuntu-2204:current
    resource_class: arm.medium
    working_directory: ~/jc-kzg-4844

  mac_os_executor:
    macos:
      xcode: "15.3.0"
    resource_class: macos.m1.medium.gen1
    working_directory: ~/jc-kzg-4844

commands:
  checkout_code:
    description: "Checkout code"
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: git submodule update --init --recursive
  build_blst:
    parameters:
      make_env:
        default: ""
        type: string
    steps:
      - run:
          name: "Build blst"
          command: |
            cd c-kzg-4844/src
            make << parameters.make_env >> build_blst -B
  build_and_test_java_binding:
    parameters:
      make_env:
        default: ""
        type: string
    steps:
      - run:
          name: "Build and test java binding"
          command: |
            cd c-kzg-4844/bindings/java
            make << parameters.make_env >> build test -B

jobs:
  x86-64-linux-build:
    executor: linux_executor
    steps:
      - checkout_code
      - run:
          name: "Install dependencies"
          command: |
            sudo apt-get update
            sudo apt-get install clang
      - build_blst
      - build_and_test_java_binding
      - persist_to_workspace:
          root: ./
          paths:
            - ./c-kzg-4844/bindings/java/src/main/resources/ethereum/ckzg4844/lib/amd64

  arm64-linux-build:
    executor: linux_executor_arm64
    environment:
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk-arm64
    steps:
      - checkout_code
      - run:
          name: "Install dependencies"
          command: |
            export NEEDRESTART_MODE=a
            sudo apt-get update
            sudo apt-get install openjdk-17-jdk
            sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-arm64/bin/java
            sudo update-alternatives --set javac /usr/lib/jvm/java-17-openjdk-arm64/bin/javac
            sudo apt-get install clang
      - build_blst
      - build_and_test_java_binding:
          make_env: "OS_ARCH=aarch64"
      - persist_to_workspace:
          root: ./
          paths:
            - ./c-kzg-4844/bindings/java/src/main/resources/ethereum/ckzg4844/lib/aarch64

  mac-os-build:
    executor: mac_os_executor
    steps:
      - checkout_code
      - build_blst
      - build_and_test_java_binding
      - build_blst:
          make_env: 'CC="cc -arch x86_64"'
      - build_and_test_java_binding:
          make_env: 'CC_FLAGS="-target x86_64-apple-macos" OS_ARCH=x86_64'
      - persist_to_workspace:
          root: ./
          paths:
            - ./c-kzg-4844/bindings/java/src/main/resources/ethereum/ckzg4844/lib/aarch64
            - ./c-kzg-4844/bindings/java/src/main/resources/ethereum/ckzg4844/lib/x86_64

  windows-build:
    executor: win/default
    steps:
      - checkout_code
      - run:
          name: "Install dependencies"
          command: |
            choco install make
            choco install mingw --version 12.2.0.03042023 --allow-downgrade --yes
            choco install openjdk17 --yes
      - build_blst
      - run:
          shell: bash.exe
          name: "Build and test java binding"
          command: |
            JDK_DISTRIBUTION_FOLDER="/c/Program Files/Eclipse Adoptium"
            JDK_VERSION=`ls "$JDK_DISTRIBUTION_FOLDER" | tail -n1`
            export JAVA_HOME="$JDK_DISTRIBUTION_FOLDER/$JDK_VERSION"
            cd c-kzg-4844/bindings/java
            make build
            ./gradlew.bat clean check
      - persist_to_workspace:
          root: ./
          paths:
            - ./c-kzg-4844/bindings/java/src/main/resources/ethereum/ckzg4844/lib/amd64

  assemble:
    executor: linux_executor
    steps:
      - checkout_code
      - attach_workspace:
          at: ~/jc-kzg-4844
      - run:
          name: "Copy java classes and generated libraries"
          command: |

            cd c-kzg-4844/bindings/java/
            
            SRCDIR="../../../src/main/java/ethereum/ckzg4844"
            RESOURCEDIR="../../../src/main/resources/ethereum/ckzg4844"
            
            mkdir -p $SRCDIR $RESOURCEDIR
            
            cp src/main/java/ethereum/ckzg4844/*.java $SRCDIR
            
            cp -R src/main/resources/ethereum/ckzg4844/lib $RESOURCEDIR

      - run:
          name: "Build Jar"
          command: |
            ./gradlew --no-daemon --parallel build

      - run:
          name: "Check Jar"
          command: |
            ./gradlew --no-daemon --info checkJarContents

      - persist_to_workspace:
          root: .
          paths:
            - ./

      - store_artifacts:
          name: "Store Jar"
          path: build/libs

  publish:
    executor: linux_executor
    steps:
      - checkout_code
      - attach_workspace:
          at: .
      - run:
          name: "Publish"
          command: |
            ./gradlew --no-daemon --parallel --stacktrace checkJarContents publish jreleaserFullRelease

workflows:
  version: 2
  default:
    jobs:
      - x86-64-linux-build:
          filters:
            tags: &filters-release-tags
              only: /^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?/
      - arm64-linux-build:
          filters:
            tags:
              <<: *filters-release-tags
      - mac-os-build:
          filters:
            tags:
              <<: *filters-release-tags
      - windows-build:
          filters:
            tags:
              <<: *filters-release-tags
      - assemble:
          requires:
            - x86-64-linux-build
            - arm64-linux-build
            - mac-os-build
            - windows-build
          filters:
            tags:
              <<: *filters-release-tags
      - publish:
          requires:
            - assemble
          filters:
            tags:
              <<: *filters-release-tags
            branches:
              ignore: /.*/
          context:
            - protocols-maven-central
